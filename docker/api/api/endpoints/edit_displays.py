#!/usr/bin/env python3

# Corona-Info-App
# 
# © 2020 Tobias Höpp

# Include dependencies

from flask import request, jsonify

# Include modules
from main import api, db, jwt
from flask_jwt_extended import jwt_required
from models.measures import display, categories
from utils.flexstring import flexstringSyntax, validateVarList, isMergable
import json

# Endpoints for Displays

@api.route("/edit/displays", methods=["POST", "GET"])
@jwt_required
def createDisplay():
# erstelle neues Display
    if request.method == "POST":
        #INPUTS:
        # category_id* (int)
        # flexstring_german*
        # name*
        # varlist
        # flexstring_english
        # subtitle_german
        # subtitle_english
        # isOFP (boolean: "true" = true, "false" = false)
        # weight (int)

        # Check for required values
        if not all(e in request.form for e in ("category_id", "flexstring_german", "name")):
            return jsonify({"status": "BadRequest"}), 400
        c = categories.query.get(request.form.get("category_id"))
        if not c:
            return jsonify({"status": "ValueError", "value": "category_id", "error": "Category not found"}), 400

        # Care about not-required values:
        if "subtitle_german" in request.form:
            st_de = request.form.get("subtitle_german")
        else:
            st_de = None
        ok, txt, epos, varlist = flexstringSyntax(request.form.get("flexstring_german"))
            #Check Flexstring syntax
        if not ok:
            return jsonify({"status": "ValueError", "value": "flexstring_german", "error": txt+" at Position "+str(epos)}), 400
        
        # Care about varlist
        if "varlist" in request.form:
            try:
                vlist = json.loads(request.form.get("varlist"))
            except ValueError:
                return "Invalid JSON in varlist", 400
            ok, etxt = validateVarList(varlist,vlist)
            if not ok:
                # check if all variables used are in varlist
                return jsonify({"status": "VarlistError", "value": "flexstring_german", "error": etxt}), 400
        else:
            # if no variablelist is delivered use the autogenerated one from german string
            vlist = varlist
        
        d = display(request.form.get("flexstring_german"), st_de, category_id=c.id)
        d.varlist = vlist
        d.is_mergable = isMergable(vlist)
        d.name = request.form.get("name")
        if "isOFP" in request.form:
            if request.form.get("isOFP") == "true":
                d.is_OFP = True
            elif request.form.get("isOFP") == "false":
                d.is_OFP = False
            else:
                return jsonify({"status": "ValueError", "value": "isOFP", "error": "use 'true' or 'false' for boolean"}), 400
        if "weight" in request.form:
            try:
                d.weight = int(request.form.get("weight"))
            except ValueError:
                return jsonify({"status": "ValueError", "value": "weight", "error": "integer required"}), 400
        # care about other languages
        if "flexstring_english" in request.form:
            ok, txt, epos, varlist = flexstringSyntax(request.form.get("flexstring_english"))
            #Check Flexstring syntax
            if not ok:
                return jsonify({"status": "ValueError", "value": "flexstring_english", "error": txt+" at Position "+str(epos)}), 400
            ok, etxt = validateVarList(varlist,vlist)
            if not ok:
                # check if all variables used are in varlist
                return jsonify({"status": "VarlistError", "value": "flexstring_english", "error": etxt}), 400
            d.flexstring_english = request.form.get("flexstring_english")
        if "subtitle_english" in request.form:
            d.subtitle_english = request.form.get("subtitle_english")
        db.session.add(d)
        db.session.commit()
        return jsonify({"status": "Done", "display_id":d.id}), 201
    elif request.method == "GET":
        # List all Displays
        #TODO: allow for more filters
        #INPUT (args):
        # defaultdisplays = true / only, default: false
        # deprecated = true, default: false
        # category_id = INT
        if request.args.get("deprecated") == "true":
            deprecated = True
        else:
            deprecated = False
        if "category_id" in request.args:
            c = categories.query.get(request.args.get("category_id"))
            if not c:
                return jsonify({"status": "ArgumentError", "argument": "category_id", "error": "Category not found"}), 400
            if request.args.get("defaultdisplays") == "true":
                di = display.query.filter(display.is_deprecated == deprecated, display.category_id==c.id).all()
            elif request.args.get("defaultdisplays") == "only":
                di = display.query.filter(display.is_default == True, display.is_deprecated == deprecated), display.category_id==c.id.all()
            else:
                di = display.query.filter(display.is_default == False, display.is_deprecated == deprecated, display.category_id==c.id).all()
        else:
            if request.args.get("defaultdisplays") == "true":
                di = display.query.filter(display.is_deprecated == deprecated).all()
            elif request.args.get("defaultdisplays") == "only":
                di = display.query.filter(display.is_default == True, display.is_deprecated == deprecated).all()
            else:
                di = display.query.filter(display.is_default == False, display.is_deprecated == deprecated).all()
        result = []
        for d in di:
            result.append({
                "id": d.id,
                "flexstring_german": d.flexstring_german,
                "subtitle_german": d.subtitle_german,
                "name": d.name,
                "isOFP": d.is_OFP,
                "is_deprecated": d.is_deprecated,
                "deprecated_by": d.deprecated_by_id,
                "category_id": d.category_id,
                "is_mergable": d.is_mergable,
                "is_default": d.is_default,
                "weight": d.weight,
                "varlist": d.varlist,
            })
        return jsonify(result), 200

@api.route("/edit/displays/<display_id>", methods=["PUT", "DELETE", "GET"])
@jwt_required
def editDisplay(display_id):
    d = display.query.get(display_id)
    if not d:
        return "Not found", 404
    # markiere Display als deprecated
    if request.method == "DELETE":
        #INPUTS:
        # undo
        # deprecated_by
        if "undo" in request.form:
            if request.form.get("undo") == "true":
                d.is_deprecated = False
                db.session.commit()
                return "Marked as not Deprecated again", 201
            elif request.form.get("undo") != "false":
                return jsonify({"status": "ValueError", "value": "undo", "error": "use 'true' or 'false' for boolean value"}), 400
        if "deprecated_by" in request.form:
            dnew = display.query.get(request.form.get("deprecated_by"))
            if not dnew:
                return jsonify({"status": "ValueError", "value": "deprecated_by", "error": "new display not found"}), 400
            d.deprecated_by_id = dnew.id
        else:
            d.deprecated_by_id = None
        d.is_deprecated = True
        db.session.commit()
        return "Marked as Deprecated", 200
# modifiziere Display
    elif request.method == "PUT":
        #INPUTS:
        # category_id (int) (highly not recommended)
        # flexstring_german
        # name
        # flexstring_english
        # subtitle_german
        # subtitle_english
        # isOFP (boolean: "true" = true, "false" = false)
        # weight (int)
        
        #Modifing varlist is not allowed. Create new display instead.
        if d.is_deprecated:
            return "Deprecated. Use Delete-Request with form 'undo'='true'", 403

        if "weight" in request.form:
            try:
                d.weight = int(request.form.get("weight"))
            except ValueError:
                return jsonify({"status": "ValueError", "value": "weight", "error": "integer required"}), 400

        if "isOFP" in request.form:
            if request.form.get("isOFP") == "true":
                d.is_OFP = True
            elif request.form.get("isOFP") == "false":
                d.is_OFP = False
            else:
                return jsonify({"status": "ValueError", "value": "isOFP", "error": "use 'true' or 'false' for boolean value"}), 400
        if "category_id" in request.form:
            c = categories.query.get(request.form.get("category_id"))
            if not c:
                return jsonify({"status": "ValueError", "value": "category_id", "error": "Category not found"}), 400
            d.category = c
        if "name" in request.form:
            d.name = request.form.get("name")
        """
        if "varlist" in request.form:
            try:
                d.varlist = json.loads(request.form.get("varlist"))
            except ValueError:
                return "Invalid JSON in varlist", 400
        """
        if "subtitle_german" in request.form:
            d.subtitle_german = request.form.get("subtitle_german")
        
        if "flexstring_german" in request.form:
            ok, txt, epos, varlist = flexstringSyntax(request.form.get("flexstring_german"))
                #Check Flexstring syntax
            if not ok:
                return jsonify({"status": "ValueError", "value": "flexstring_german", "error": txt+" at Position "+str(epos)}), 400
            # check if all variables used are in varlist
            ok, etxt = validateVarList(varlist,d.varlist)
            if not ok:
                return jsonify({"status": "VarlistError", "value": "flexstring_german", "error": etxt}), 400
            d.flexstring_german = request.form.get("flexstring_german")
        """
        elif "varlist" in request.form:
            # check if changed varlist is valid and contains all the preexisting variables of not changed stuff
            ok, txt, epos, varlist = flexstringSyntax(d.flexstring_german)
            if not ok:
                return jsonify({"status": "Internal Server Error", "error": "data integrety error checking varlist for flexstring_german: "+txt+" at Position "+str(epos)}), 500
            # check if all variables used are in varlist
            ok, etxt = validateVarList(varlist,d.varlist)
            if not ok:
                return jsonify({"status": "ValueError", "value": "varlist", "error": "varlist incompatible with flexstring_german: "+etxt}), 400
        """

        # care about other languages
        if "flexstring_english" in request.form:
            ok, txt, epos, varlist = flexstringSyntax(request.form.get("flexstring_english"))
            #Check Flexstring syntax
            if not ok:
                return jsonify({"status": "ValueError", "value": "flexstring_english", "error": txt+" at Position "+str(epos)}), 400
            # check if all variables used are in varlist
            ok, etxt = validateVarList(varlist,d.varlist)
            if not ok:
                return jsonify({"status": "VarlistError", "value": "flexstring_english", "error": etxt}), 400
            d.flexstring_english = request.form.get("flexstring_english")
        """
        elif "varlist" in request.form:
            # check if changed varlist is valid and contains all the preexisting variables of not changed stuff
            ok, txt, epos, varlist = flexstringSyntax(d.flexstring_english)
            if not ok:
                return jsonify({"status": "Internal Server Error", "error": "data integrety error checking varlist for flexstring_english: "+txt+" at Position "+str(epos)}), 500
            # check if all variables used are in varlist
            ok, etxt = validateVarList(varlist,d.varlist)
            if not ok:
                return jsonify({"status": "ValueError", "value": "varlist", "error": "varlist incompatible with flexstring_english: "+etxt}), 400
        """

        if "subtitle_english" in request.form:
            d.subtitle_english = request.form.get("subtitle_english")

        db.session.commit()
        return jsonify({"status": "Done", "display_id":d.id}), 200
    elif request.method == "GET":
        #INPUT
        # groupLinks (true / false)
        result = {
                "id": d.id,
                "flexstring_german": d.flexstring_german,
                "flexstring_english": d.flexstring_english,
                "subtitle_german": d.subtitle_german,
                "subtitle_english": d.subtitle_english,
                "name": d.name,
                "isOFP": d.is_OFP,
                "varlist": d.varlist,
                "is_deprecated": d.is_deprecated,
                "deprecated_by": d.deprecated_by_id,
                "category_id": d.category_id,
                "is_mergable": d.is_mergable,
                "is_default": d.is_default,
                "weight": d.weight,
            }
        if "groupLinks" in request.args:
            if request.args.get("groupLinks") == "true":
                result["groupLinks"] = []
                for gl in d.groupLink:
                    if gl.displayGroup.name == 0:
                        is_default = False
                    else:
                        is_default = True
                    result["groupLinks"].append({
                        "group": {
                            "id": gl.displayGroup_id,
                            "name": gl.displayGroup.name,
                            "is_default": is_default,
                        },
                        "configuration": gl.configuration,
                    })
            elif request.args.get("groupLinks") != "false":
                return jsonify({"status": "ArgumentError", "argument": "groupLinks", "error": "use 'true' or 'false' for boolean value"}), 400
        return jsonify(result), 200
